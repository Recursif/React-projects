
# React

A Javascript library for building user interfaces.

## Declarative

React makes it painless to create interactive UIs.

Design simple views for each state in your application,
and React will efficiently update and render just the right
components when your data changes.

Declarative views make your code more predictable and easier
to debug.


## Component-Based

Build encapsulated components that manage their own
state, then compose them to make complex UIs.

Since component logic is written in Javascript instead of templates,
you can easily pass rich data through your app and keep state out of the DOM.


## Learn Once, Write Anywhere

We don't make assumptions about the rest of your technology stack,
so you can develop new features in React without rewriting existing code.

React can also render on the server using Node and
power mobile apps using React-Native.


## A simple Component

React components implement a render() method
that takes input data and returns what to display.

This example uses an XML-like syntax called JSX.

Input data that is passed into the component can be accessed by render()
via this.props.

JSX is optional and not required to use Reaact.

Try the babel REPL to see the raw Javascript code produced by the JSX compilation step.


class HelloMessage extends React.Component {
  render() {
    return (
      <div>
        Hello {this.props.name}
      </div>
    );
  }
}

ReactDOM.render(
  <HelloMessage name="Taylor" />,
  document.getElementById("app")
)


## A Stateful Component

In addition to taking input data (accessed via this.props), a component
can maintain internal state data (accessed via this.state).

When a component's state data changes, the rendered markup will updated
by re-invoking render().


class Timer extends React.Component {
  constructor(props) {
    super(props);
    this.state = { seconds: 0 };
  }

  tick() {
    this.setState(prevState => ({
      seconds: prevState.seconds + 1
    }));
  }

  componentDidMount() {
    this.interval = setInterval(() => this.tick(), 1000);
  }

  componentWillUnMount() {
    clearInterval(this.interval);
  }

  render() {
    return (
      <div>
        Seconds: {this.state.seconds}
      </div>
    );
  }
}

ReactDOM.render(<Timer />, mountNode);


## An application

Using props and state, we can put together a small Todo application.

This example uses state to track the current list of items as well as the
text that user has entered.

Althrough event handlers appear to be rendered inline,
they will be collected and implemented using event delegation.


class TodoApp extends React.Component {
  constructor(props) {
    super(props);
    this.state = { items: [], text: '' };
    this.handleChange = this.handleChange.bind(this);
    this.handleSubmit = this.handleSubmit.bind(this);
  }

  handleChange(e) {
    this.setState({ text: e.target.value })
  }

  handleSubmit(e) {
    e.preventDefault();
    if (!this.state.text.length) {
      return;
    }
    const newItem = {
     text: this.state.text,
     id: Date.now()
    };

    this.setState(prevState => ({
      items: prevState.items.concat(newItem),
      text: ''
    }));
  }

  render() {
    return (
      <div>
        <h3>TODO</h3>
        <TodoList items={this.state.items} />
        <form onSubmit={this.handleSubmit}>
          <label htmlFor="new-todo">
            what needs to be done?
          </label>
          <input
            id="new-todo"
            onChange={this.handleChange}
            value={this.state.text}
          />
          <button>
            Add #{this.state.items.length + 1}
          </button>
        </form>
      </div>
    )
  }
}


class TodoList extends React.Component {
  render() {
    return (
      <ul>
        {this.props.items.map(item => (
          <li key={item.id}>{item.text}</li>
        ))}
      </ul>
    )
  }
}

ReactDOM.render(<TodoApp />, document.getElementById("app"))




## A Component Using External Plugins

React is flexible and provides hooks that allow you to interface with
other librairies and frameworks.

This example uses remarkable, an external Markdown library, to convert
the <textarea>'s value in real time.


class MarkdownEditor extends React.Component {
  constructor(props) {
    super(props)
    this.handleChange = this.handleChange.bind(this)
    this.state = { value: 'Hello, **World**!'}
  }

  handleChange(e) {
    this.setState({ value: e.target.value })
  }

  getRawMarkup() {
    const md = new Remarquable();
    return { __html: md.render(this.state.value) }
  }

  render() {
    return (
      <div className="MarkdownEditor">
        <h3>Input</h3>
        <label htmlFor="MarkdownEditor">
          Enter some Markdown
        </label>
        <textarea
          id="markdown-content"
          onChange={this.handleChange}
          defaultValue={this.state.value}
          />
        <h3>Output</h3>
        <div
          className="content"
          dangerouslySetInnerHTML={this.getRawMarkup()}
        />
      </div>
    )
  }
}

ReactDOM.render(<MarkdownEditor />, document.getElementById("app"))
