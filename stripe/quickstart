
# Card Payments Quickstart

Securely collect card information from your customers and create a
card payment.


Accepting a card payment using Stripe is a two-step process,
with a client side and a server-side action:

1- From your website running in the customer's browser, Stripe
securely collects your customer's payment information and
returns a representative token. This, along with nay other
form data, is then submitted by the browser to your server.


2-Using the token, your server-side code makes an API request to
create a charge an d complete the payment.

Tokenization ensures that no sensitive card data ever needs to touch
your server so your integration can operate in a PCI compliant way.


## HTTPS requirement

All submissions of payment infp using Elements are made via a secure HTTPS
connection.

However, to protect youself from certain forms of man-in-the-middle attacks,
and to prevent your suctomers from seeing Mixed content warning in modern browser,
you must serve the page containing the payment form over HTTPS as well.

## Step 1: Set up Stripe Elements

Elements is available as part of Stripe.js.

<script src="https://js.stripe.com/v3/"></script>

To get starded, include this script on every page on your site, not just the checkout page.

Including the script on every page allows Stripe to detect anomalous behavior that may be indicative of fraud as
users browse your website.

Next, create an instance of Element:

javascript:

var stripe = Stripe('pk_test_6pRNASCoBOKtIshFeQd4XMUh')
var elements = stripe.elements();

We've placed a random API key in the code.
actual publishable API key to test this code through your Stripe account.

When you're ready to accept live card payments, replace
the test key for production uses.


## Step 2: Create your payment form

To securely collect card details from your customers,
Elements creates UI components for you that are hosted by Stripe.

THey are placed into payment form, rather than you creating them
directly.

To determine where to insert these components, create empty
DOM elements (containers) with unique IDs within your payment form.
We recommend placing your container within a <label> or next to a <label>
with a for attribute that matches the unique id of the element container.

By doing so, the element automatically gains focus when the customers clicks on the corresponding label.


For example:

<form action="/charge" method="post" id="payment-form">
  <div class="form-row">
    <label for="card-element">
      Credit or debit card
    </label>
    <div id="card-element">
      <!-- A stripe Element will be inserted here. -->
    </div>

    <!-- Used to display Element errors. -->
    <div id="card-errors" role="alert"></div>
  </div>

  <button>Submit Payment</button>
</form>


When the form above has loaded, create an instance of an Element and mount it to the Element container
created above:

Javascript:

// Custom styling can be passed to options when creating an Element.
var style = {
  base: {
    // Add your base input styles here. For example:
    fontSize: '16px',
    color: '#323225d',
  }
};

// Create an instance of the card Element.
var card = elements.create('card', {style: style});

// Add an instance of the card Element into the card 'card-element' <div>.
card.mount('#card-element');

The card Element simplifies the form and minimizes the number of fields required by inserting a single,
flexible input field that securely collects all necessary card details.
Refer to our Stripe.js reference doc for a full list of Element types that are supported.

Elements validates user input as it is typed. To help your customers catch mistakes, you should
listen to change events on the card Element and display errors:

card.addEventListener('change', function(event) {
  var displayError = document.getElementByID('card-errors');
  if (event.error) {
    displayError.textContent = event.error.message;
  } else {
    displayError.textContent = '';
  }
})


## Step 3: Create a token to securely transmit card information

The payment details collected using Elements can then be converted into a token.
Create an event handler that handles the submit event on the form.
The handler sends the fields to Stripe for Tokenization and prevents the forms's submission
(the form is submitted by Javascript in the next step).

var form = document.getElementById('payment-form');
form.addEventListener('submit', function(event) {
  event.preventDefault();

  stripe.createToken(card).then(function(result) {
    if (result.error) {
      // Inform the customer that there was an error.
      var errorElement = document.getElementByID('card-errors');
      errorElement.textContent = result.error.message;
    } else {
      // Send the token to your server.
      stripeTokenHandler(result.token);
    }
  })
})


Stripe createToken returns a Promsie which resolves with a result object.
This object has either:

- result.token: a Token was created successfully.
- result.error: there was an error. This includes client-side validation errors.
Refer to the API reference for all possible errors.


## Step 4: Submit the token and the rest of your form to your server

The last step is to submit the token, along with any additional information that has been colected,
to your server.

function stripeTokenHandler(token) {
  // Insert the token ID into the form so it gets submitted to the server.
  var form = document.getElementById('payment-form');
  var hiddenInput = document.createElement('input');
  hiddenInput.setAttribute('type', 'hidden');
  hiddenInput.setAttribute('name', 'stripeToken');
  hiddenInput.setAttribute('value', token.id);
  form.appendChild(hiddenInput);

  // Submit the form
  form.submit();
}

## Using Elements with React

If you intend to use react go to :
https://github.com/stripe/react-stripe-elements


## Next Steps

Congrats! You now have a custom payment form to accept card payments with Stripe.
Once you've sent your form to the server, you'll be able to use the token to perform a
charge or to save to a customer.

Learn more about how to create charges or make use of subscriptions
