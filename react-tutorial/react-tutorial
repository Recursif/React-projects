
# Tic-tac-toe

## What is React

React is a declarative, efficient, and flexible
Javascript library for building user interfaces.

React has a few different kinds of components,
but we'll start with React.Component.

class ShoppingList extends React.Component {
  render() {
    return (
      <div className="shopping-list">
        <h1>Shopping List for {this.props.name}</h1>
        <ul>
          <li>Instagram</li>
          <li>WhapsApp</li>
          <li>Oculus</li>
        </ul>
      </div>
    )
  }
}


Components tell React what to render - then React
will efficiently update and render just the right
components when your data changes.

Here, ShoppingList is a React component class,
or React component type. A component takes in parameters,
called props, and returns a hierarchy of views to display
via the render method.

Render return React element, which is a lightweight
description of what to render.

The shoppingList component only render built-in DOM
components, but you can compose custom React components just as easily,
by writing <ShoppingList />. Each component is encapsulated so it can
operate independently, which allows you to build complex UIs out of
simple components.



## Get started

3 components :
- Square
- Board
- Game

The Square component renders a single <button/>,

the Board renders 9 squares, and the Game component renders a board with
some placeholders that we'll fill in later.



## Passing Data Through Props

Let's try to pass some data from the Board component to the Square:

class Board extends Component {
  renderSquare(i) {
    return <Square value={i} />
  }
}

Then change Square's render method to show that value by
replacing {/* */} with {this.props.value}:

class Square extends Component {
  render() {
    return (
      <button className="square">
       {this.props.value}
      </button>
    )
  }
}



## An Interactive Component

Let's make the Square component fill in an "X"
when you click it. Try changing the button
tag returned in the render() function of the
Square like this:

class Square extends Component {
  render() {
    return (
      <button className="square" onClick={() => alert('click')}>
        {this.props.value}
      </button>
    )
  }
}

Doing {alert('click')} would alert immediately instead of when
the button is clicked.

React components can have state by setting this.state in the
constructor, which should be considered private to the component.

Let's store the current value of the square in state,
and change it when the square is clicked.


First, add a constructor to the class to initialize the state:

class Square extends Component {
  constructor(props) {
    super(props)
    this.state = {
      value: null,
    }
  }

  render() {
    return (
      <button className="square" onClick{() => alert('click')}>
        {this.props.value}
      </button>
    )
  }
}

In Javascript classes, you need to explicitly call super();
when defining the constructor of a subclass.

Now change the Square render method to display the value from
the current state, and to toggle it on click:

- Replace this.props.value with this.state.value inside the button tag.

- Replace the () => alert() event handler with () => this.setState({value: 'X'}).


class Square extends Component {
  constructor(props) {
    super(props)
    this.state = {
      value: null,
    }
  }

  render() {
    return (
      <button className="square" onClick={() => this.setState({value: 'X'})}>
        {this.state.value}
      </button>
    )
  }
}


Whenever this.setState is called, an update to the component is
scheduled, causing React to merge in the passed state updated and
rerender the component along with its descendants.

When the component rerenders, this.state.value will be 'X'
so you'll see an X in the grid.

If you click on any square, an X should show up in it.



## Lifting State Up

We now have the basic building blocks for a tic-tac-toe game.
But right now, the state is encapsulated in each Square component.

To make a fully-working game, we now need to check if
one player has wont the game, and alternate placing X and O
in the squares. To check if someone has won, we'll need to have
the value of all 9 squares in one place, rather than split up
accross the Square components.


The best solution here is to store this state in the Board
component instead of in each Square - and the Board component can tell
each Square what to display, like how we made each display its index earlier.

When you want to aggregate data from multiple children or to have
two child components communicate with each other,
move the state upwards so that it lives in the parent component.

The parent can then pass the state back down to the children via props,
so that the children components are always in sync with each other and with
the parent.

class Board extends Component {
  constructor(props) {
    super(props)
    this.state = {
      squares: Array(9).fill(null),
    }
  }
  renderSquare(i) {
  return <Square value={i} />;
}

render() {
  const status = 'Next player: X';

  return (
      <div>
        <div className="status">{status}</div>
        <div className="board-row">
          {this.renderSquare(0)}
          {this.renderSquare(1)}
          {this.renderSquare(2)}
        </div>
        <div className="board-row">
          {this.renderSquare(3)}
          {this.renderSquare(4)}
          {this.renderSquare(5)}
        </div>
        <div className="board-row">
          {this.renderSquare(6)}
          {this.renderSquare(7)}
          {this.renderSquare(8)}
        </div>
      </div>
    );
  }
}

We'll fill it in later so that a board looks something like

[
  'O', null, 'X',
  'X', 'X', 'O',
  'O', null, null,
]

Board's renderSquare method currently looks like this:

renderSquare(i) {
  return <Square value={i} />
}


Modify it to pass a value prop to Square.

renderSquare(i) {
  return <Square value={this.state.squares[i]} />;
}

Now we need to change what happens when a square is clicked.
The Board component now stores which squares are filled,
which means we need some way for Square to update the state of Board.
Since component state is considered private, we can't update Board's state
directly from Square.

The usual pattern here is pass down a function from Board to Square that
gets called when the square is clicked. Change renderSquare in Board again
so that it reads:

renderSquare(i) {
  return (
    <Square
      value={this.state.squares[i]}
      onClicl={() => this.handleClick(i)}
    />
  )
}


Now we are passing down two props from Board to Square:
value and onClick. The latter is a function that Square can call.
Let's make the following changes to Square:

- Replace this.state.value with this.props.value in Square's render

- Replace this.setState() with this.props.onClick()

- Delete constructor

Now when the square is clicked, it calls the onClick function that was
passed by Board. Let's recap what happens here:

- The onClick prop on the build-in DOM <button> components tells React to set up
a click event listner.

- When the button is clicked, React will call the onClick event handler
defined in Square's render() method.

- This event handler calls this.props.onClick(). Square's props were
specified by the Board.

- Board passed onClick={() => this.handleClick(i)} to Square, so,
when called, it runs this.handleClick(i) on the board.

- We have not defined the handleClick() method on the Board yet,
so the code crashes.

handleClick(i) {
  const squares = this.state.squares.slices()
  squares[i] = 'X'
  this.setState({squares: squares})
}

We call .slice() to copy the squares array instead of
mutating the existing array.

Now you should be able to click in squares to fill them again,
but the state is stored in the Board component instead of in each Square,
which lets us continue building the game.


## Why immutability is important

In the previous code example, we suggest using the .slice() operator

to copy the squares array prior to making changes and to prevent
mutating the existing array. Let's talk about what this means and why it is
an important concept to learn.

There are generally two ways for changing data. The first method is to
mutate the data by directly changing the values of a variable.

The second method is to replace the data with a new copy of the object
that also includes desired changes.

### Data change with mutation

var player = {score: 1, name: 'Jeff'}
player.score = 2
// Now player is {score: 2, name: 'Jeff'}


### Data change without mutation

var player = {score: 1, name: 'Jeff'}

var newPlayer = Object.assign({}, player,  {score: 2})
// Now player is unchanged, but newPlayer is {score: 2, name: 'Jeff'}

// Or if you are using object spread syntax proposal, you can
write :
// var newPlayer = {...player, score: 2}


The end result is the same but by not mutating
directly we now have an added benefit that can help us
increase component and overall application performance.


Easier Undo/Redo and Time Travel

Immutability also makes some complex features much
easier to implement.

Ex: time travel

Avoiding data mutations lets us keep a reference to older versions
of the data, and switch between them if we need to.

Tracking Changes

Determinig if a mutated object has changed is complex because changes
are made directly to the object. This then requires comparing the current
object to a previous copy, traversing the entire object tree, and comparing each variable
and value.
This process = Complex


Determining how an immutable object has changed is considerably easier.
If the object being referenced is different from before, then the object
has changed. That's it!


Determining When to Re-Render in React

The biggest benefit of immutability in React comes when you build
simple pure components. Since immutable data can more easily determine
if changes have been made, it also helps to determine when a component
requires being re-rendered.



## Functional Components

We've removed the constructor, and in fact, React supports a simpler
syntax called functional components for component types like Square
that only consist of a render method.

Rather than define a class extending React.Component,
simply write a function that takes props and returns what should be rendered.

Replace the whole Square class with this function:

function Square(props) {
  return (
    <button className="square" onClick={props.onClick}>
      {props.value}
    </button>
  );
}

You'll need to change this.props to props.

While we’re cleaning up the code, we also changed onClick={() => props.onClick()}
to just onClick={props.onClick}, as passing the function down is enough for our example.


## Taking turns

An obvious defect in our games is that only X can play \o/

Let’s default the first move to be by ‘X’.
Modify our starting state in our Board constructor:

class Board extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      squares: Array(9).fill(null),
      xIsNext: true,
    };
  }

Each time we move we shall toggle xIsNext by flipping the boolean value and saving the state.

handleClick(i) {
  const squares = this.state.squares.slice();
  squares[i] = this.state.xIsNext ? 'X' : 'O';
  this.setState({
    squares: squares,
    xIsNext: !this.state.xIsNext,
  });
}


## Declaring a Winner

function calculateWinner(squares) {
  const lines = [
    [0, 1, 2],
    [3, 4, 5],
    [6, 7, 8],
    [0, 3, 6],
    [1, 4, 7],
    [2, 5, 8],
    [0, 4, 8],
    [2, 4, 6],
  ]
  for (let i = 0; i < lines.length; i++) {
    const [a, b, c] = lines[i];
    if (squares[a] && squares[a] === squares[b] && squares[b] && squares[a] === squares[c]) {
      return squres[a]
    }
  }
  return null
}

You can call it in Board's render function to check if anyone has won
the game and make the status text show "Winner: [X/O]" when someone
wins.

Replace the status declaration in Board's render with this code:

render() {
  const winner = calculateWinner(this.state.squares)
  let status
  if (winner) {
    status = 'Winner: ' + winner
  } else {
    status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O')
  }
}


You can now change handleClick in Board to return early and ignore
the click is someone has already won the game or if a square is already
filled:

handleClick(i) {
  const squares = this.state.squares.slice();
  if (calculateWinner(squares) || squares[i]) {
    return ;
  }
  squares[i] = this.state.xIsNext ? 'X' : 'O';
  this.setState({
    squares: squares,
    xIsNext: !this.state.xIsNext,
  });
}

Congratulations! You now have a working tic-tac-toe game. And now you know the basics of React.
So you’re probably the real winner here.


## Storing a History

Let's make it possible to revisit old states of the board so we can
see what looked like after any of the previous moves.
We're already creating a new squares array each time a moce
is made, which means we can easily store the past board states simultaneously.

Let’s plan to store an object like this in state:

history = [
  {
    squares: [
      null, null, null,
      null, null, null,
      null, null, null,
    ]
  },
  {
    squares: [
      null, null, null,
      null, 'X', null,
      null, null, null,
    ]
  },
  // ...
]

First, set up the initial state for Game by adding a constructor to it:

class Game extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      history: [{
        squares: Array(9).fill(null),
      }],
      xIsNext: true,
    };
  }

Then change Board so that it takes squares via props and has its own
onClick prop specified by Game, like the transformation we made for
Square earlier. You can pass the location of each square into the click
handler so that we still know which square was clicked.

Here is alist of steps you need to do:

- Delete the constructor in Board

- Replace this.state.squares[i] with this.props.state.squares[i]

- Replace this.handleClick(i) with this.props.onClick(i)


Next, we need to move the handleClick method implementation from Board to Game.

You can cut it from the Board class, and paste it into the Game class.

We also need to change it a little, since Game state is structured differently.

## Showing the Moves

For each step in the history, we create a list item <li> with a button
<button> inside it that has a click handler which we'll implement shortly.

 With this code, you should see a list of the moves that have been made in the game,
 along with a warning that says:

Warning: Each child in an array or iterator should have a unique “key” prop.
Check the render method of “Game”.


## Keys

When you render a lsit of items, React always stores some info about each item in the list.
If you render a component that has stable, that state needs to be stored - and regardless of how you
implement your components, React stores a reference to the backing native views.

When you update that list, React needs to determine what has changed.

You could've added, removed, rearranged, or updated items in the list.

Imagine transitioning from

<li>Alexa: 7 tasks left</li>
<li>Ben: 5 tasks left</li>

to

<li>Ben: 9 tasks left</li>
<li>Claudia: 8 tasks left</li>
<li>Alexa: 5 tasks left</li>

As a result, React asks you to specify a key property on each element in a list,
a string to differentiate each component from its siblings.

In this case alexa, ben, claudia might be sensible keys;
if the items correspond to objects in a database
the database ID is usually a good choice:

<li key={user.id}>{user.name}: {user.taskCount} tasks left</li>

a key is  special property that's reserved by React (along with ref,
a more advanced feature).

When an element is created, React pulls off the key property and stores
the key directly on the returned element.

Even though it may look like it is part of props,
it cannot be referenced with this.props.key.

React uses the key automatically while deciding which children to update;
there is no way for a component to inquire about its own key.

When a list is rerendered, React takes each element in the new version
and looks for one with a matching key in the previous list.

When a key is added to the set, a component is created;
when a key is removed, a component is destroyed.

Keys tell React about the identity of each component,
so that it can maintain the state across rerenders.

If you change the key of a component,
it will be completely destroyed and recreated with a new state.

It’s strongly recommended that you assign proper keys
whenever you build dynamic lists.

If you don’t specify any key,
React will warn you and fall back to using the array index as a key

Component keys don’t need to be globally unique,
only unique relative to the immediate siblings.


## Implementing Time Travel

For our move list, we already have a uniqu ID for each step:
the number of he move when it happened.

Clicking any of the move buttons throws an error because jumpTo is undefined.

Let’s add a new key to Game’s state to indicate which step we’re currently viewing.

Next, we’ll define the jumpTo method in Game to update that state.

We set xIsNext to true if the index of the move number is an even number.

Then update stepNumber When a new move is made by adding stepNumber: history.length

We’ll also update handleClick to be aware of stepNumber when reading the current board state

Now you can modify Game’s render to read from that step in the history.


## Wrapping Up

Now, you’ve made a tic-tac-toe game that:

- let's you play tic-tac-toe
- indicates when one player has won the game
- stores history of moves during the game,
- allows players to jump bacj in time to see older versions of the game board.

To learn more about defining components, check out the React.Component API reference.
https://reactjs.org/docs/react-component.html

/*
Sources:
https://reactjs.org/tutorial/tutorial.html

*/
