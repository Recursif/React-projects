

# Our App: Chuck Norris World

## Build the back-end 

Let's build an API to serve the list of jokes to our app. 

We'll quickly build the API with NodeJs. 
The API is simple.

This is what we need:

- An endpoint to serve jokes about food /api/jokes/food 

- An endpoint to server jokes about celebrities /api/jokes/celebrity 

- Secure the endpoint that serves celebrity jokes,
so that it can only be accessed by registed users.

## Build the front with react 

### Fetch the Api Data 

The first thing we need to do is to fetch the API data from 
our Node backend to display in your app.

We are using a very good promise based http client, axios. An alternative for this is superagent.

In the getFoodData and getCelebrityData functions,
axios fetches data from the API endpoints. 

Then we do this: export {getFoodData, getCelebrityData} 
to make them ready for use in our components.


### Build the Nav Component 

The Nav.js file is our Nav component. Go ahead and add code to it like so:

import React, { Component }  from 'react'
import { Link } from 'react-router'
import '../App.css'

class Nav extends Component {
    render() {
        return (
            <nav className="navbar navbar-default">
                <div className="navbar-header">
                    <Link className="navbar-brand" tp="/">Chuck Norris World</Link>
                </div>
                <ul className="nav navbar-nav">
                    <li>
                        <Link to="/">Food Jokes</Link>
                    </li>
                    <li>
                        <Link to="/special">Celebrity Jokes</Link>
                    </li>
                </ul>
                
                <ul className="nav navbar-nav navbar-right">
                    <li><button className="btn btn-info log">Log In</button></li>
                    <li><button className="btn btn-danger log">Log out </button></li>
                </ul>
            </nav>
        )
    }
}

export default Nav


## Build the Celebrity Jokes and FoodJokes Component 

By default, these two components will look similar in functionalities.

They both display data from different endpoints. 


import React, { Component } from 'react'
import { Link } from 'react-router'
import Nav from './Nav'
import { getFoodData } from '../utils/chucknorris-api'


class FoodJokes extends Component {
    constructor() {
        super()
        this.state = { jokes: [] }
    }

    getFoodJokes() {
        getFoodData().then((jokes) => {
            this.setState({ jokes })
        })
    }

    componentDidMount() {
        this.getFoodJokes()
    }

    render() {
        const { jokes } = this.state

        return (
            <div>
                <Nav />
                <h3 className="text-center">Chuck Norris Food Jokes</h3>
                <hr/>

                { jokes.map((joke, index) => (
                    <div className="col-sm-6" key={index}>
                        <div className="panel panel-primary">
                        <div className="panel-heading">
                            <h3 className="panel-title"> <span className="btn">#{ joke.id }</span></h3>
                        </div>
                        <div className="panel-body">
                            <p> { joke.joke } </p>
                        </div>
                        </div>
                    </div>
                ))}

                <div className="col-sm-12">
                    <div className="jumbotron text-center">
                        <h2>Get Access to Celebrity Jokes By Logging In</h2>
                    </div>
                </div>

                <div className="col-sm-12">
                    <div className="jumbotron text-center">
                    <h2>View Celebrity Jokes</h2>
                    <Link className="btn btn-lg btn-success" to='/special'> Celebrity Jokes </Link>
                    </div>
                </div>
            </div>
        )
    }
}

export default FoodJokes 


The FoodJoke component is pulling data from an API,
so it needs a way of holding that data.

That's where state comes in.

In ReactJs, you can use props to pass data around and use 
state to hold manage that data.

In the constructor, we define the initial state as seen in the code below:

In the getFoodJokes method, we call the getFoodData method we exported from the 
chucknorris-api.js helper file and set state as seen below:


 getFoodJokes() {
    getFoodData().then((jokes) => {
      this.setState({ jokes });
    });
  }
...

Now we took avantage of one of the ReactJS lifecycle hooks, componentDidMount.

Whatever is defined in this method is applied immediatly after a 
component is mounted on the browser screen.

So, we invoked the getFoodJokes method in the hook as seen below:


...
 componentDidMount() {
    this.getFoodJokes();
  }
...


All we are trying to do is tell ReactJS to load the data from the API immediately the FoodJokes component gets rendered.

Finally, we rendered the component with the ReactJS render method. 

Note: In ReactJs, when you loop through some form of data, you have to rpovide the key property 
and make sure it has a unique value, else an error will thrown!



## Now let's build the CelebrityJokes component the same way :

import React, { Component } from 'react'
import getCelebrityData from '../utils/chuck-api'


class CelebrityJokes extends Component {
    constructor(props) {
        super(props)
        this.state = { jokes: [] }
    }

    getCelebrityJokes() {
        getCelebrityData().then(jokes => {
            this.setState(jokes)
        })
    }

    componentDidMount() {
        getCelebrityJokes()
    }

    render () {
          <div>
                <Nav />
                <h3 className="text-center">Chuck Norris Food Jokes</h3>
                <hr/>

                {jokes.map((joke, index) => (
                    <div className="col-sm-6" key={index}>
                        <div className="panel panel-danger">
                            <div className="panel-heading">
                                <h3 className="panel-title"><span className="btn">#{ joke.id }</span></h3>
                            </div>
                            <div className="panel-body">
                                <p> { joke.joke } </p>
                            </div>
                        </div>
                    </div>
                ))}
                
                <div className="col-sm-12">
                    <div className="jumbotron text-center">
                        <h2>View Food Jokes</h2>
                        <Link className="btn btn-lg btn-success" to='/'>Chuck Norris Food Jokes </Link>
                    </div>
                </div>
            </div>
        )    
    }
}

export default CelebrityJokes



## Build the Root Component 

This is the component where we got to define how 
routing should work in our application and also 
bind it to the root div that holds the whole app.

