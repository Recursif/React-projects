
# Adding Authentification to Your ReactJS App 

The majority of the apps we use on a daily basis 
have a means of authentification usrs.

I'll show you how to easily add authentification to our 
ReactJs application.

We'll use Auth0 as our authentification service.

Auth0 allows us to issue JSON Web Tokens (JWTs).

If you don't already have an AUth0 account, sign up
for a free one now.


Auth0 offers a generous free tier to get started with modern application.

Login to your Auth0 management dashboard and 
let's create a new API client. 

From here, click on the APIs menu item and then the Create API button. You will need to give your API a name and an identifier. 


## Secure The node API 


We need to secure the API so that the celebrity endpoint will only be accessible to authenticated users. 

We can secure it easily with Auth0.

Open up your server.js file replace the YOUR-API-AUDIENCE-ATTRIBUTE, and YOUR-AUTH0-DOMAIN variable
variables with the audience attribute of the API, and your auth0 domain respectively.

Then add the authCheck middleware to the celebrity endpoint like so:


Note: You should load these values from env variables for security reasons.

We are using Auth0's Centralized Login Page in the Login method 
and passed in our credentials.

The auth0 package calls the Auth0's authorize endpoint.

With all the details we passed to the method, our client app will 
be validated and authorized to perform authentification.

The parameters that you do not have yet are the {AUTH0_CLIENT_ID}
and the {YOUR_CALLBACK_URL}.

When you created your API, Auth0 also created a test client 
which you can use. Additionnally, you can use any existing SPA Auth0 client 
found in Clients section oy your management dashboard.

Check the Test panel of your API from the dashboard. 


We also checked whether the token has expired via the getTokenExpirationDate and isTokenExpired methods.

The isLoggedIn method returns true or false based on the presence and validity of a user id_token.

Finally, we implemented a middleware, the requireAuth method.

We'll use this method to protect the /special route being accessed for non-loggedIn users.

Let's go update the Nav component to hide/show the login and logout buttons based on the user's authentication status.


Note: We used an arrow function to wrap and execute the onClick handlers like so:
{() => login()}. Check out how to handle events in react with arrow function to understand why we used arrow functions.


We imported login, logout and isLogged functions from the AuthService.

Then, we attached the login() and logout() functions to the login and logout buttons respectively.

We also hid the /special link by checking the authentication status of the user via the isLoggedIn() function.

