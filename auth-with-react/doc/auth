
# Adding Authentification to Your ReactJS App 

The majority of the apps we use on a daily basis 
have a means of authentification usrs.

I'll show you how to easily add authentification to our 
ReactJs application.

We'll use Auth0 as our authentification service.

Auth0 allows us to issue JSON Web Tokens (JWTs).

If you don't already have an AUth0 account, sign up
for a free one now.


Auth0 offers a generous free tier to get started with modern application.

Login to your Auth0 management dashboard and 
let's create a new API client. 

From here, click on the APIs menu item and then the Create API button. You will need to give your API a name and an identifier. 


## Secure The node API 


We need to secure the API so that the celebrity endpoint will only be accessible to authenticated users. 

We can secure it easily with Auth0.

Open up your server.js file replace the YOUR-API-AUDIENCE-ATTRIBUTE, and YOUR-AUTH0-DOMAIN variable
variables with the audience attribute of the API, and your auth0 domain respectively.

Then add the authCheck middleware to the celebrity endpoint like so:


Note: You should load these values from env variables for security reasons.

We are using Auth0's Centralized Login Page in the Login method 
and passed in our credentials.

The auth0 package calls the Auth0's authorize endpoint.

With all the details we passed to the method, our client app will 
be validated and authorized to perform authentification.

The parameters that you do not have yet are the {AUTH0_CLIENT_ID}
and the {YOUR_CALLBACK_URL}.

When you created your API, Auth0 also created a test client 
which you can use. Additionnally, you can use any existing SPA Auth0 client 
found in Clients section oy your management dashboard.

Check the Test panel of your API from the dashboard. 


We also checked whether the token has expired via the getTokenExpirationDate and isTokenExpired methods.

The isLoggedIn method returns true or false based on the presence and validity of a user id_token.

Finally, we implemented a middleware, the requireAuth method.

We'll use this method to protect the /special route being accessed for non-loggedIn users.

Let's go update the Nav component to hide/show the login and logout buttons based on the user's authentication status.


Note: We used an arrow function to wrap and execute the onClick handlers like so:
{() => login()}. Check out how to handle events in react with arrow function to understand why we used arrow functions.


We imported login, logout and isLogged functions from the AuthService.

Then, we attached the login() and logout() functions to the login and logout buttons respectively.

We also hid the /special link by checking the authentication status of the user via the isLoggedIn() function.


We are enabling the link to celebrity jokes based on the login status of a user via the isLoggedIn() method.


## Add a Callback Component 

We will create a new component and call it Callback.js.

This component will be activated when the localhost:3000/callback route is called and it will 
process the redirect from Auth0 and ensure we received the right data back after 
a succeful authentification.

The component will store the access_token and id_token.


Once the user is authenticated, Auth0 will redirect back to our application and call the /callback
route.

Auth0 will also append the id_token as well as the access_token to this request, 
and our Callback component will make sure to properly process and store those tokens in 
localStorage.

If all is well, meaning we received an id_token, and access_token, we will 
be redirected back to the / page and will be in a logged-in-state.


## Add some values to Auth0 Dashboard 

Just before you try to log in or sign up,
head over to your Auth0 dashboard and add 
http://localhost:3000/callback to the Allowed Callback URLs and http://localhost:3000 to Allowed Origins (CORS).


## Secure The Special Route 

We need to ensure that no one can go to the browser and just type /special to access the celebrity route.




We secured our endpoint earlier, but right now we are not passing the access_token to the backend yet.

We need to send the access token along with our request as a header to enable the secured endpoint's recognition of the logged-in user.


### Updating the ChuckNorris API helper 

Go ahead and open up the utils/chuck-api.js file.

We will tweak the getCelebrityData function a bit. Currently, it initiates a GET request only to fetch data from the API.

Now, we will pass an option to send an authoriaztion header with a Bearer 
access token along with the GET request like so:


import { getAccessToken } from './AuthService'

funtion getCelebrityData() {
    const url = `${BASE_URL}/api/jokes/celebrity`
    return axios.get(url, headers; { Authorization: `Bearer ${getAccessToken()}`}}).then(res => res.data)
}


##Â Conclusion 

In addition, Auth0 can help secure your ReactJS apps with more than just username-password authentication.
It provides features like multifactor auth, anomaly detection, enterprise federation, single sign on (SSO), and more. 

