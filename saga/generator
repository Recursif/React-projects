Generator


The function* declaration (function keyword followed by an asterik) defines a generator function,
which returns a Generator object.

function* generator(i) {
  yield i;
  yield i + 10;
}

var gen = generator(10);

console.log(gen.next().value);
// expected output: 10

console.log(gen.next().value);
// expected output: 20

Generators are functions which can be exited and later re-entered.
Their context (variable bindings) will be saved across re-entrances.

Generators in Js -- especially when combined with Promises
are a very powerful tool for asynchronous programming as they mitigate -- if not entirely eliminate
-- the problems with callbacks, such as Callback Hell and Inversion Control.


Calling a generator function does not execute its body immediately; an iterator object for
the function is returned instead.
When the iterator's next() method is called, the generator function's body execute until the first yield expression,
which specify the value property containing the yielded value and a done property which specified the value to be returned.

The next method returns an object with a value property containing the yielded value and done property which indicates whether
the generator has yielded its last value as a boolean.

A return statement in a generator, when executed, will make the generator finished.


function* anotherGenerator(i) {
  yield i + 1;
  yield i + 2;
  yield i + 3;
}

function* generator(i) {
  yield i;
  yield* anotherGenerator(i);
  yield i + 10;
}

var gen = generator(10);

console.log(gen.next().value); // 10
console.log(gen.next().value); // 11
console.log(gen.next().value); // 12
console.log(gen.next().value); // 13
console.log(gen.next().value); // 20
